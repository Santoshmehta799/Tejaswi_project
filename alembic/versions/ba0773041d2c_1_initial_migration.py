"""1 initial_migration

Revision ID: ba0773041d2c
Revises:
Create Date: 2025-06-02 12:44:51.588472

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "ba0773041d2c"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "colour",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_colour_id"), "colour", ["id"], unique=False)
    op.create_table(
        "product_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_product_type_id"), "product_type", ["id"], unique=False)
    op.create_table(
        "quality",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_quality_id"), "quality", ["id"], unique=False)
    op.create_table(
        "storage_location",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_storage_location_id"), "storage_location", ["id"], unique=False
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("password", sa.String(), nullable=True),
        sa.Column(
            "role",
            sa.Enum("STICKER_GUYS", "DISPATCH_GUYS", name="userrole"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "stickergenerator",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("product_number", sa.String(length=50), nullable=False),
        sa.Column("quality_id", sa.Integer(), nullable=True),
        sa.Column("colour_id", sa.Integer(), nullable=True),
        sa.Column("product_type_id", sa.Integer(), nullable=True),
        sa.Column("storage_location_id", sa.Integer(), nullable=True),
        sa.Column("trading_name", sa.String(length=20), nullable=True),
        sa.Column("shift", sa.String(length=20), nullable=True),
        sa.Column("production_date", sa.Date(), nullable=True),
        sa.Column("serial_number", sa.String(length=100), nullable=True),
        sa.Column("gsm", sa.String(length=10), nullable=True),
        sa.Column("net_weight", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column("gross_weight", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column("length", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column("width", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("qr_code_data", sa.Text(), nullable=True),
        sa.Column("qr_code_image", sa.LargeBinary(), nullable=True),
        sa.Column("qr_code_filename", sa.String(length=255), nullable=True),
        sa.CheckConstraint("shift IN ('8AM-8PM', '8PM-8AM')", name="check_shift_valid"),
        sa.CheckConstraint(
            "trading_name IN ('bharat', 'green')", name="check_trading_name_valid"
        ),
        sa.ForeignKeyConstraint(
            ["colour_id"],
            ["colour.id"],
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_type_id"],
            ["product_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["quality_id"],
            ["quality.id"],
        ),
        sa.ForeignKeyConstraint(
            ["storage_location_id"],
            ["storage_location.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("product_number", name="uq_product_number"),
    )
    op.create_index(
        op.f("ix_stickergenerator_id"), "stickergenerator", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_stickergenerator_product_number"),
        "stickergenerator",
        ["product_number"],
        unique=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_stickergenerator_product_number"), table_name="stickergenerator"
    )
    op.drop_index(op.f("ix_stickergenerator_id"), table_name="stickergenerator")
    op.drop_table("stickergenerator")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_storage_location_id"), table_name="storage_location")
    op.drop_table("storage_location")
    op.drop_index(op.f("ix_quality_id"), table_name="quality")
    op.drop_table("quality")
    op.drop_index(op.f("ix_product_type_id"), table_name="product_type")
    op.drop_table("product_type")
    op.drop_index(op.f("ix_colour_id"), table_name="colour")
    op.drop_table("colour")
    # ### end Alembic commands ###
